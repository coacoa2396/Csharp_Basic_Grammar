namespace _01.DataType
{
    internal class Program
    {
        /***************************************************************** 
         * 자료형 (Data Type)
         * 
         * 자료(데이터)의 형태를 지정
         * 데이터가 메모리에 저장되는 형태와 처리되는 방식을 명시하는 역할
         * 0과 1만으로 구성된 컴퓨터에게 여러 형태의 자료를 저장하기 위함
         *****************************************************************/

        // 8bit = 1byte

        //<자료형 종류>
        //자료형 이름      자료형 형태          메모리 크기     표현 범위
        //
        // - 논리형 -
        // bool            논리 자료형           1 byte         true, false
        //
        // - 정수형 - 
        // byte             부호있는 정수형      1 byte         0 ~ 255
        // short            정수형              2 byte         -2^14(-32,768) ~ +2^15 -1(+32,767)
        // int              부호있는 정수형      4 byte         -2^31(-21억) ~ +2^31 - 1(21억)
        // long             정수형              8 byte         -2^63(-9경) ~ +2^63 -1(+9경)
        // uint             부호없는 정수형      4 byte         0 ~ +2^32 - 1(42억)
        // 
        // - 실수형 -
        // float            부동소수점 실수형    4 byte          3.4e-38  ~ 3.4e+38   =>  약 소수점 7자리
        // double           부동소수점 실수형    8 byte          1.7e-308 ~ 1.7e+308  =>  약 소수점 15자리
        //
        // - 문자형 - 
        // char             유니코드 문자형      2byte           'a', 'b', '한', ...
        // string           유니코드 문자열        X             "abcde", "안녕", ...


        static void Main(string[] args)
        {
            /************************************************************************
            * 변수 (variable)
            * 
            * 데이터를 저장하기 위해 프로그램에 의해 이름을 할당받은 메모리 공간
            * 데이터를 저장할 수 있는 메모리 공간을 의미하며, 저장된 값은 변경 가능
            ************************************************************************/

            // <변수 선언 및 초기화>
            // 자료형의 선언하고 빈칸 뒤에 변수이름을 작성하여 변수 선언
            // 선언한 변수에 값을 처음 할당하는 과정을 초기화라고 함
            // 변수 선언과 초기화 과정을 동시에 진행할 수 있음

            int iValue= 10;                    // int 자료형의 이름이 inValue인 변수에 10의 데이터를 초기화
            float fValue;                       // float 자료형의 이름이 floatValue인 변수를 선언하지만 값을 초기화하지 않음
            // int intValue;                    // error : 같은 이름의 변수는 사용 불가
            // Console.WriteLine(floatValue);   // error : 선언한 변수에 값을 초기화하기 전까지 사용 불가


            // <변수에 데이터 저장>
            // =(대입연산자) 좌측에 변수를 배치
            iValue = 5;                         // iValue 변수에 5의 데이터 저장
            fValue = 1.2f;                      // fValue 변수에 1.2f 데이터를 초기화
                                                // 소수점 뒤에 f를 붙여야 float 소수점
                                                // 디폴트 값은 double 소수점

            // <변수의 데이터 불러오기>
            // 데이터가 필요한 곳에 변수명을 배치
            int rValue = 20;
            int lValue = rValue;
                        
            Console.WriteLine($"rValue 변수에 보관된 데이터는 {rValue} 입니다.");
            Console.WriteLine($"lValue 변수에 보관된 데이터는 {lValue} 입니다.");
            // 변수는 소문자로 시작하는 것이 국룰


            /*****************************************************************
             * 상수 (Constant)
             *
             * 프로그램이 실행되는 동안 변경할 수 없는 데이터
             * 프로그램에서 값이 변경되기를 원하지 않는 데이터가 있을 경우 사용
             * 저장된 값은 프로그램 종료시까지 변경 불가능
             ******************************************************************/

            // <상수 선언 및 초기화>
            // 변수 선언 앞에 const 키워드를 추가하여 상수 선언
            const int MAX = 200;        // MAX 상수 변수를 선언하고 초기화
            Console.WriteLine($"MAX 상수에 보관된 데이터는 {MAX} 입니다.");
            // const int MIN;           // error : 상수는 초기화 없이 사용불가
            // MAX = 20                 // error : 상수의 데이터 변경 불가
            // 상수는 대문자로 쓰는 것이 국룰



            /*******************************************************************
             * 배열 (Array)
             * 
             * 동일한 자료형의 요소들로 구성된 데이터 집합
             * 인덱스를 통하여 개개의 배열요소(Element)에 접근할 수 있음
             * 배열의 처음 요소의 인덱스는 0부터 시작함
             *******************************************************************/

            // <1차원 배열 사용>
            // 자료형 뒤에 [] 괄호를 추가하여 배열로 사용함을 선언
            int[] iArray;              // int 배열 선언
            iArray = new int[20];      // int 데이터를 20개 가지는 배열 생성
            iArray[0] = 1;             // 배열의 0번째 변수에 20 대입
            float[] fArray = { 1.1f, 2.2f, 3.3f, 4.4f };  // 배열 선언과 초기화, 배열의 크기는 초기화한 갯수만큼 자동 생성
            Console.WriteLine($"0번째 변수값은 {fArray[1]} 입니다.");

            // <다차원 배열>
            // 다차원 배열의 선언은 자료형뒤에 []괄호를 추가하며, 추가하는 차원수만큼 ','를 추가
            int[,] matrix = new int[5, 10];      // 10개짜리 5개 => 50개
            int[,,] cube = new int[3, 5, 20];    // 20개짜리 5개 3그룹 => 300개

            matrix[1, 3] = 20;
            Console.WriteLine($"3번째줄의 1번째 변수값은 {matrix[1, 3]} 입니다.");


            
            
            
            /*데미지가 23, 30%의 추가데미지
                 29.9
            int damage = 29.9;  //int니까 소수점은 불가*/

            /*****************************************************************
             * 형변환 (Casting)
             *
             * 데이터를 선언한 자료형에 맞는 형태로 변환하는 작업
             * 다른 자료형의 데이터를 저장하기 위해선 형변환 과정을 거쳐야하며,
             * 이 과정에서 보관할 수 없는 데이터는 버려짐
             ******************************************************************/

            // <명시적 형변환 - 수동>
            // 변환할 데이터의 앞에 변환할 자료형을 괄호 안에 넣어서 형변환 진행
            int damage3 = (int)29.9f; // 29만 출력 됨. 보관할 수 없는 데이터는 버려짐
            // int inValue = 1.2f;   // error : 명시적 형변환 없이 변환 불가
            // 데이터의 손실이 있는 경우는 명시적 형변환을 사용해야 한다


            // <묵시적 형변환 - 자동>
            double d1 = 1;             // double이 int보다 범위가 크기 때문에 형변환을 굳이 안해줘도 들어감
            double d = 123.345f;       // double이 float보다 범위가 크기 때문에 형변환을 굳이 안해줘도 들어감
            float f = (float)123.456;  // float가 double보다 범위가 작기 때문에 명시적 형변환이 필요하다

            // <문자 형변환과 아스키코드 & 유니코드>
            // 아스키코드 : 이진법을 사용하는 컴퓨터에서 문자를 표현하기 위해 정해둔 문자와 숫자의 매칭표
            // 유니코드 : 영어만 표현이 가능했던 아스키코드에서 전세계의 모든 문자를 다루도록 설계한 매칭표
            char key = (char)65;    // 65를 글자로 변환하면 아스키코드&유니코드 상에서 A가 나온다
            int value = (int)'a';

            // <문자열 형변환>
            // 문자열은 단순형변환이 불가
            // 각 자료형의 Parse, TryParse를 이용하여 문자열에서 자료형으로 변환
            // 각 자료형에서 ToString을 이용하여 자료형에서 문자열로 변환
            int hp = int.Parse("50");
            float percent = float.Parse("0.2");
            bool success = int.TryParse("100", out hp);  // 되면 바꾸고 안되면 안바꿈
            
            string hundred = 100.ToString();
            string aaaa = 10.2f.ToString();
            string valueTostring = value.ToString();
            



            int[] exam = new int[26];

            exam[0] = 99;
            exam[1] = 20;
            exam[2] = 60;

            Console.WriteLine(exam[2]);



            int level = 1;   // 초기화
            level = 10;      // 대입

            Console.Write("당신의 레벨 : ");
            Console.WriteLine(level);

            level = 20;      // 대입

            Console.Write("당신의 레벨 : ");
            Console.WriteLine(level);

            level = 30;      // 대입

            Console.Write("당신의 레벨 : ");
            Console.WriteLine(level);

            Console.WriteLine($"당신의 레벨은 {level} 입니다.");

            const int maxEXP = 200;
            Console.WriteLine($"maxEXP값은 {maxEXP} 입니다.");
            
        }
    }
}