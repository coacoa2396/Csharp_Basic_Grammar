namespace _02.Operator
{
    internal class Program
    {
        static void Main(string[] args)
        {

            bool b = false;
            int i = 0;
            float f = 0.0f;


            /********************************************************************
             * 연산자 (Operator)
             *
             * 프로그래밍 언어에서는 일반적인 수학 연산과 유사한 연산자들이 지원됨
             * C++는 여러 연산자를 제공하며 기본 연산을 수행할 수 있음
             *********************************************************************/


            /**************************************************************
             * 산술 연산자
             **************************************************************/

            // <이진 연산자>
            i = 2 + 3;     // +(더하기)
            i = 3 - 1;     // -(빼기)
            i = 3 * 3;     // *(곱하기)
            f = 5f / 2f;   // /(나누기) : 주의! 5 / 3 과 같이 int의 나눗셈은 소수점을 버림
            i = 13 % 3;    // %(나머지)

            // <단항 연산자>
            i = +3;        // + 단항연산자(양수) : 값을 그대로 둠
            i = -3;        // - 단항연산자(음수) : 값을 마이너스로 변환 -> 2의 보수로 만든다.
            ++i;           // ++ 전위증가연산자 : 값을 1 증가
            i++;           // ++ 후위증가연산자 : 값을 1 증가
            --i;           // -- 전위감소연산자 : 값을 1 감소
            i--;           // -- 후위감소연산자 : 값을 1 감소

            // <전위연산자와 후위연산자>
            // 전위연산자 : 더하고 값 불러오기
            i = 0;           
            Console.WriteLine(i);   // output : 0
            Console.WriteLine(++i); // output : 1
            Console.WriteLine(i);   // output : 1
            // 후위연산자 : 값 불러오고 더하기
            i = 0;
            Console.WriteLine(i);   // output : 0
            Console.WriteLine(i++); // output : 0
            Console.WriteLine(i);   // output : 1

            /**************************************************************
             * 대입 연산자
             **************************************************************/
           
            // <대입 연산자>
            i = 10;           // = 대입연산자 : 오른쪽의 값을 왼쪽 변수에 대입

            int hp = 100;

            hp = hp + 10;
            hp += 10;

            i = i + 10;
            i += 10;
            // <복합 대입 연산자>
            // 이진 연산자(op) 가 있을 경우
            // x = x op y;  =>  x op= y; 둘 모두 동일
            i += 5;    // i = i + 5; 와 같다


            /****************************************************************
             *비교 연산자
             ****************************************************************/

            // <비교 연산자>
            b = 2 > 2;          // > : 왼쪽 데이터가 더 클 경우 true
            b = 3 < 1;          // < : 왼쪽 데이터가 더 작을 경우 true
            b = 2 >= 2;         // >=: 왼쪽 데이터가 더 크거나 같은 경우 true
            b = 2 <= 1;         // <=: 왼쪽 데이터가 더 작거나 같은 경우 true
            b = 3 == 1;         // ==: 두 데이터가 같은 경우 true
            b = 3 != 2;         // !=: 두 데이터가 다른 경우 true


            /****************************************************************
            * 논리 연산자
            ****************************************************************/

            // < 논리 연산자>
            b = !false;          // !(Not) : true -> false, false -> true
            b = true && false;   // &&(And): 두 데이터 모두 true 일때 true
            b = true || false;   // ||(Or) : 둘 중 하나라도 true 일때 true

            // 스킬을 쓸 수 있는 상황
            // 쿨타임이 다 돌았고     그리고    마나도 스킬 마나보다 높아야 사용가능

            // 어몽어스 시민 승리 조건
            // 마피아를 전부 투표로 잡거나   또는   미션 전부 클리어


            // <조건부 논리 연산자>

            // 조건부 논리 Or 연산자 ||
            // 빠른 계산을 위해 true || x(논리자료형) 의 경우 어떠한 논리자료형이 있어도
            // 결과는 항상 true이기 때문에 true || x 에서 x는 무시하게 됨
            i = 10;
            b = true || (i++ > 5);   // || 연산이기 때문에 뒤의 조건을 그냥 무시함
            Console.WriteLine(i);    // output : 10

            b = (i++ > 5) || true;   // true가 뒤에 있기 때문에 앞에 것을 계산하고 지나감
            Console.WriteLine(i);    // output : 11

            // 조건부 논리 And 연산자 &&
            // 빠른 계산을 위해 false && x(논리자료형) 의 경우 어떠한 논리자료형이 있어도
            // 결과는 항상 false이기 때문에 false && x 에서 x는 무시하게 됨
            i = 10;
            b = false && (++i > 5);
            Console.WriteLine(i);  // output : 10

            // 주의! 논리 연산자 안에서는 산술 연산을 하지 않는 것을 추천
            //       조건을 만족하면 산술 연산이 무시될 수 있기 때문

            /****************************************************************
            * 비트 연산자 -> 다른 것에 비해서 미친듯이 빠르다!
            ****************************************************************/

            i = 0b0011;             // 0b : 2진수
            i = 0x001A;             // 0x : 16진수

            // <단항 연산자>
            i = ~0x1F;               // ~(비트 보수) : 데이터를 비트단위로 보수 연산 ex) 1001 -> 0110

            // <이진 연산자> -> 이해 안되면 까먹어
            i = 0x11 & 0x83;        // 데이터를 비트단위로 And 연산
            i = 0x11 | 0x83;        // 데이터를 비트단위로 Or 연산

            // <비트 쉬프트 연산자>
            i = 0x10 << 1;          // << : 데이터를 비트 단위로 왼쪽으로 이동
            i = 0x10 >> 1;          // >> : 데이터를 비트 단위로 오른쪽으로 이동
                                    // 그래서 이거 왜 씀?
                                    // 2의 n제곱배로 수를 늘리고 줄임
                                    // 속도를 매우 빠르게 할 수 있다
                                    // 100 / 2     ->    100 * 0.5    ->     100 >> 1

            
            
            /****************************************************************
            * 연산자 우선순위
            *
            * 여러 연산자가 있는 식에서 우선 순위가 높은 연산자가 먼저 계산
            ****************************************************************/

            // <연산자 우선순위>
            // 1. 기본 연산        : a[i], x++, x--
            // 2. 단항 연산        : +x, -x, !x, ~x, ++x, --x, (Type)x
            // 3. 곱하기 연산      : x * y, x / y, x % y
            // 4. 더하기 연산      : x + y, x - y
            // 5. 시프트 연산      : x << y, x >> y
            // 6. 비교 연산        : x < y, x > y, x <= y, x >= y
            // 7. 같음 연산        : x == y, x != y
            // 8. 논리 AND 연산    : x & y, x && y
            // 9. 논리 XOR 연산    : x ^ y
            // 10. 논리 OR 연산    : x | y, x || y
            // 11. 대입 연산       : x = y, x op= y

            //기본 > 곱하기 > 더하기 > 비교 > 논리 > 대입


        }
    }
}